package com.example.demo;

public class Book {

	int id;	String author, year, title;

	public int getId() {

		return id;

	}

	public void setId(int id) {

		this.id = id;

	}

	public String getAuthor() {

		return author;

	}

	public void setAuthor(String author) {

		this.author = author;

	}

	public String getYear() {

		return year;

	}

	public void setYear(String year) {

		this.year = year;

	}

	public String getTitle() {

		return title;

	}

	public void setTitle(String title) {

		this.title = title;

	}

	@Override

	public String toString() {



		return "Book [id=" + id + ", author=" + author + ", year=" + year + ", title=" + title + "]";

	}

}
package com.example.demo;

import java.util.ArrayList;

import java.util.List;

import org.springframework.web.bind.annotation.DeleteMapping;

import org.springframework.web.bind.annotation.GetMapping;

import org.springframework.web.bind.annotation.PathVariable;

import org.springframework.web.bind.annotation.PostMapping;

import org.springframework.web.bind.annotation.PutMapping;

import org.springframework.web.bind.annotation.RequestBody;

import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RestController;

@RestController

@RequestMapping("/book")

public class BookController {

	List<Book> blist = new ArrayList<Book>();	

	

	@GetMapping

	public List<Book> getBooks(){

		return blist;

	}

	@PostMapping

	public List<Book> postBook(@RequestBody Book book) {

		blist.add(book);

		return blist;

		

	}

	

	

	 @PutMapping("/{id}")

	    public List<Book> updateBook(@PathVariable int id, @RequestBody Book updatedBook) {

	        for (int i = 0; i < blist.size(); i++) {

	            if (blist.get(i).getId() == id) { // Assuming Book has an `id`

	                blist.set(i, updatedBook);

	                return blist;

	            }

	        }

	        throw new RuntimeException("Book with id " + id + " not found.");

	    }

	    @DeleteMapping("/{id}")

	    public List<Book> deleteBook(@PathVariable int id) {

	        for (int i = 0; i < blist.size(); i++) {

	            if (blist.get(i).getId() == id) { // Assuming Book has an `id` field

	                blist.remove(i);

	                return blist;

	            }

	        }

	        throw new RuntimeException("Book with id " + id + " not found.");

	    }

	

}
